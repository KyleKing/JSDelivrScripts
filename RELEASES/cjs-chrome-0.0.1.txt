// Modify header dimension to minimize GUI disruption
$( '#top-menu' ).css( 'height', '2.5em' )
$( '#top-menu' ).css( 'padding', '8px 5px 5px 5px' )
// Source script file
const scriptURL = 'https://cdn.jsdelivr.net/gh/KyleKing/JSDelivrScripts@latest/cjs-redmine-dist.js'
$( 'body' ).append( `<script src="${scriptURL}"></script>` )
// Create Progress Bar for MM Procedures Progress (Ian)
if ( window.location.href.indexOf( 'MM_Procedures_-_Manufacturing_and_Service' ) !== -1 ) {
  const issueStatuses = []  // For tables with 8 columns, store the status text in an array
  var summaryTable = null
  $( '.wiki.wiki-page table tr' ).each( function() {
    if ( summaryTable === null ) {
      if ( $( this ).find( 'th' ).length === 3 )  // Locate summary table
        summaryTable = this
    }
    const cells = $( this ).find( 'td' )
    if ( cells.length === 8 )
      issueStatuses.push( cells[1].textContent.trim() )  // Combine text from all cells
  } )
  // Calculate the current progress
  const countCompl = issueStatuses.filter( value => value === 'Complete' ).length
  const progress = Math.floor( countCompl / issueStatuses.length * 100 )
  const h6Target = $( $( 'h6' )[0] )  // Create target for Crel to replace
  h6Target.after( '<div id="progress-crel-target"></div>' )
  // Generate Table with Crel
  crel( document.querySelector( '#progress-crel-target' ),
    crel( 'h2', `Progress ${progress}% (${countCompl} Complete of ${issueStatuses.length}):` ),
    crel( 'div', {'class': 'value', 'style': 'height: 45px'},
      crel( 'table', {'class': `progress progress-${progress}`, 'style': 'display: inline-table'},
        crel( 'tbody',
          crel( 'tr',
            crel( 'td', {'class': 'closed', 'style': `width: ${progress}%`, 'title': `${progress}%`} ),
            crel( 'td', {'class': 'todo', 'style': `width: ${100 - progress}%`} )
          )
        )
      )
    )
  )
  h6Target.remove() // Remove original target
  // Update summary table
  if ( summaryTable !== null ) {
    $( summaryTable.parentElement ).find( 'td' ).contents().filter( function() {
      return this.textContent.indexOf( 'COUNT:' ) !== -1
    } ).each( function() {
      // First separate out 'COUNT:' identifier, then count number of tickets for each key separate by '+' signs
      const counts = this.textContent.split( ':' )[1].split( '+' )
        .map( key => issueStatuses.filter( value => value === key.trim() ).length )
      const ticketCount = counts.reduce( ( accum, curr ) => accum + curr )
      this.textContent = `${ticketCount} ticket${ticketCount > 1 ? 's' : ''}${counts.length > 1 ? ` (${counts})` : ''}`
    } )
  }
}
